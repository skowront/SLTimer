@page "/"

@if (this.timeLeft.TotalMilliseconds > 0)
{
    <div style="vertical-align:middle">
        <div class="text-center" style="margin-top:2%">
            <RadzenText TextStyle="TextStyle.H1" Style="margin-top:0%;">@WebsiteLoc.WebsiteTitle</RadzenText>
                <RadzenCard>
                    <RadzenText TextStyle="TextStyle.Body1" Style="margin-top:0%;">@WebsiteLoc.Description</RadzenText>
                </RadzenCard>
                <RadzenText TextStyle="TextStyle.H2" Style="margin-top:5%;">@($"{WebsiteLoc.TimeLeft}:")</RadzenText>
                <RadzenText TextStyle="TextStyle.H2" Style="display:inline">@($"{this.timeLeft.Days} {WebsiteLoc.Days} {this.timeLeft.Hours} {WebsiteLoc.Hours} {this.timeLeft.Minutes} {WebsiteLoc.Minutes} {this.timeLeft.Seconds} {WebsiteLoc.Seconds}")</RadzenText>
            </div>
        </div>
}
else
{
    <div style="vertical-align:middle">
        <div class="text-center" style="margin-top:5%">
            <RadzenText TextStyle="TextStyle.H1" Style="margin-top:5%;">@WebsiteLoc.WebsiteTitle</RadzenText>
                <RadzenCard>
                    <RadzenText TextStyle="TextStyle.Body1" Style="margin-top:0%;">@WebsiteLoc.Description</RadzenText>
                </RadzenCard>
                <RadzenText TextStyle="TextStyle.H2" Style="margin-top:5%;color:red">@($"{WebsiteLoc.DeadlineBrokenBy}:")</RadzenText>
                <RadzenText TextStyle="TextStyle.H2" Style="display:inline;color:red">@($"{this.timeLeft.Days} {WebsiteLoc.Days} {this.timeLeft.Hours} {WebsiteLoc.Hours} {this.timeLeft.Minutes} {WebsiteLoc.Minutes} {this.timeLeft.Seconds} {WebsiteLoc.Seconds}")</RadzenText>
            </div>
        </div>
}

<div style="vertical-align:middle">
    <div class="text-center" style="margin-top:5%">
        <RadzenText TextStyle="TextStyle.H2" Style="margin-top:5%;">@WebsiteLoc.Promises</RadzenText>
            <RadzenCard Style="width: 250px;" Class="rz-border-radius-3">
                <RadzenRow Gap="0.5rem">
                    <RadzenColumn Size="8" Class="rz-text-truncate">
                        <RadzenBadge BadgeStyle="BadgeStyle.Light" Text=@($"") Class="rz-mr-1" IsPill="true" />
                        <RadzenText TextStyle="TextStyle.Caption" Class="rz-mb-0">@("order.ShipName")</RadzenText>
                    </RadzenColumn>
                    <RadzenColumn Size="4" Class="rz-text-align-right">
                        <RadzenBadge BadgeStyle="BadgeStyle.Secondary" Shade="Shade.Lighter" Text=@($"{String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", "order.Freight")}") IsPill="true" />
                    </RadzenColumn>
                </RadzenRow>
                <hr style="border: none; background-color: rgba(0,0,0,.08); height: 1px; margin: 1rem 0;" />
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem">
                    <RadzenImage Path="order.Employee?.Photo" Class="rz-border-radius-10" Style="width: 80px; height: 80px;" AlternateText="@("order.Employee?.FirstName order.Employee?.LastName")" />
                    <RadzenStack Gap="0">
                        <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-mb-0"><strong>@("order.Employee?.FirstName + order.Employee?.LastName")</strong></RadzenText>
                        <RadzenText TextStyle="TextStyle.Body2" Class="rz-mb-0">@("order.ShipAddress")</RadzenText>
                        <RadzenText TextStyle="TextStyle.Caption" Class="rz-mb-0">@("order.ShipCity), @(order.ShipCountry")</RadzenText>
                    </RadzenStack>
                </RadzenStack>
            </RadzenCard>
        </div>
    </div>


    @code {
    private DateTime start = new DateTime(2023, 12, 13, 12, 0, 0);
    private DateTime end = new DateTime(2023, 12, 13, 12, 0, 0) + TimeSpan.FromDays(100);
    private TimeSpan timeLeft;
    private System.Threading.Timer? timer;
    TabPosition tabPosition = TabPosition.Top;

    protected override async Task OnInitializedAsync()
    {
        // timeLeft = (end - start) - (DateTime.Now - start);
        timeLeft = TimeSpan.FromSeconds(-1);
        timeLeft = TimeSpan.FromSeconds(1000);
        // NOTE: THE FOLLOWING CODE ADDED
        timer = new System.Threading.Timer(async (object? stateInfo) =>
        {
            timeLeft = timeLeft.Subtract(TimeSpan.FromSeconds(1));
            StateHasChanged();
        }, new System.Threading.AutoResetEvent(false), 0, 1000);
    }

    void OnChange(int index)
    {

    }
}
